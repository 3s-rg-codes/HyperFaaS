syntax = "proto3";

package worker;

import "common/common.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/3s-rg-codes/HyperFaaS/proto/worker";

enum VirtualizationType {
  CONTAINER = 0;
}

enum Event {
  EVENT_RESPONSE_UNSPECIFIED = 0;
  EVENT_DOWN = 1;
  EVENT_TIMEOUT = 2;
  EVENT_START = 3;
  EVENT_STOP = 4;
  EVENT_CALL = 5;
  EVENT_RUNNING = 6;
}

enum Status {
  STATUS_SUCCESS_UNSPECIFIED = 0;
  STATUS_FAILED = 1;
}

message StatusUpdate {
  string instance_id = 1;
  VirtualizationType type = 2;
  Event event = 3;
  Status status = 4;
  string function_id = 5;
  google.protobuf.Timestamp timestamp = 6;
}

message StatusRequest {
  string node_id = 1;
}

message MetricsRequest {
  string node_id = 1;
}

message MetricsUpdate{
  double used_ram_percent = 1;
  repeated double cpu_percent_percpus = 2;
}

message StartResponse {
  string instance_id = 1;
  string instance_ip = 2;
  string instance_name = 3;
}

message StartRequest {
  string function_id = 1;
}

message StopRequest {
  string instance_id = 1;
}

message StopResponse {
  string instance_id = 1;
}

message SignalReadyRequest {
  string instance_id = 1;
}

service Worker {
  // Start a new instance for the given function ID. 
  // The function metadata must exist in etcd.
  // A response with status code OK means that the instance is 
  // created and ready to serve requests.
  rpc Start (StartRequest) returns (StartResponse);

  // Call an instance of a function with the given function ID.
  // The instance must be running.
  rpc Call (common.CallRequest) returns (common.CallResponse);
  rpc Stop (StopRequest) returns (StopResponse);
  // Returns a stream of status events, like container crashes and timeouts.
  rpc Status (StatusRequest) returns (stream StatusUpdate);
  // Returns resource usage metrics.
  rpc Metrics (MetricsRequest) returns (MetricsUpdate);
  // Signal that the instance is ready to serve requests. 
  // Instances must call this endpoint upon startup.
  rpc SignalReady (SignalReadyRequest) returns (google.protobuf.Empty);
}
