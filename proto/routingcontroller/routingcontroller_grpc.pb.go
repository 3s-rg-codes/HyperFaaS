// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: routingcontroller/routingcontroller.proto

package routingcontroller

import (
	context "context"
	common "github.com/3s-rg-codes/HyperFaaS/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoutingController_State_FullMethodName = "/routingcontroller.RoutingController/State"
)

// RoutingControllerClient is the client API for RoutingController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutingControllerClient interface {
	// State streams changes in state of a function_id.
	// A change in the number of downstream nodes
	// that manage nodes which have an instance of this function.
	State(ctx context.Context, in *common.StateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[common.StateResponse], error)
}

type routingControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutingControllerClient(cc grpc.ClientConnInterface) RoutingControllerClient {
	return &routingControllerClient{cc}
}

func (c *routingControllerClient) State(ctx context.Context, in *common.StateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[common.StateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RoutingController_ServiceDesc.Streams[0], RoutingController_State_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[common.StateRequest, common.StateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RoutingController_StateClient = grpc.ServerStreamingClient[common.StateResponse]

// RoutingControllerServer is the server API for RoutingController service.
// All implementations must embed UnimplementedRoutingControllerServer
// for forward compatibility.
type RoutingControllerServer interface {
	// State streams changes in state of a function_id.
	// A change in the number of downstream nodes
	// that manage nodes which have an instance of this function.
	State(*common.StateRequest, grpc.ServerStreamingServer[common.StateResponse]) error
	mustEmbedUnimplementedRoutingControllerServer()
}

// UnimplementedRoutingControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoutingControllerServer struct{}

func (UnimplementedRoutingControllerServer) State(*common.StateRequest, grpc.ServerStreamingServer[common.StateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method State not implemented")
}
func (UnimplementedRoutingControllerServer) mustEmbedUnimplementedRoutingControllerServer() {}
func (UnimplementedRoutingControllerServer) testEmbeddedByValue()                           {}

// UnsafeRoutingControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutingControllerServer will
// result in compilation errors.
type UnsafeRoutingControllerServer interface {
	mustEmbedUnimplementedRoutingControllerServer()
}

func RegisterRoutingControllerServer(s grpc.ServiceRegistrar, srv RoutingControllerServer) {
	// If the following call pancis, it indicates UnimplementedRoutingControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoutingController_ServiceDesc, srv)
}

func _RoutingController_State_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.StateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoutingControllerServer).State(m, &grpc.GenericServerStream[common.StateRequest, common.StateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RoutingController_StateServer = grpc.ServerStreamingServer[common.StateResponse]

// RoutingController_ServiceDesc is the grpc.ServiceDesc for RoutingController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutingController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routingcontroller.RoutingController",
	HandlerType: (*RoutingControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "State",
			Handler:       _RoutingController_State_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "routingcontroller/routingcontroller.proto",
}
