// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: leaf/leaf.proto

package leaf

import (
	context "context"
	common "github.com/3s-rg-codes/HyperFaaS/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Leaf_ScheduleCall_FullMethodName     = "/leaf.Leaf/ScheduleCall"
	Leaf_RegisterFunction_FullMethodName = "/leaf.Leaf/RegisterFunction"
	Leaf_State_FullMethodName            = "/leaf.Leaf/State"
)

// LeafClient is the client API for Leaf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeafClient interface {
	// Schedules a function call on a worker.
	ScheduleCall(ctx context.Context, in *common.CallRequest, opts ...grpc.CallOption) (*common.CallResponse, error)
	// Registers a function autoscaler on the leaf.
	// Must be called before calling ScheduleCall.
	// An entry for the function must exist in the database.
	RegisterFunction(ctx context.Context, in *RegisterFunctionRequest, opts ...grpc.CallOption) (*common.CreateFunctionResponse, error)
	// State streams changes in state of a function_id.
	// A change in the number of running instances.
	State(ctx context.Context, in *common.StateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[common.StateResponse], error)
}

type leafClient struct {
	cc grpc.ClientConnInterface
}

func NewLeafClient(cc grpc.ClientConnInterface) LeafClient {
	return &leafClient{cc}
}

func (c *leafClient) ScheduleCall(ctx context.Context, in *common.CallRequest, opts ...grpc.CallOption) (*common.CallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.CallResponse)
	err := c.cc.Invoke(ctx, Leaf_ScheduleCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leafClient) RegisterFunction(ctx context.Context, in *RegisterFunctionRequest, opts ...grpc.CallOption) (*common.CreateFunctionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.CreateFunctionResponse)
	err := c.cc.Invoke(ctx, Leaf_RegisterFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leafClient) State(ctx context.Context, in *common.StateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[common.StateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Leaf_ServiceDesc.Streams[0], Leaf_State_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[common.StateRequest, common.StateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Leaf_StateClient = grpc.ServerStreamingClient[common.StateResponse]

// LeafServer is the server API for Leaf service.
// All implementations must embed UnimplementedLeafServer
// for forward compatibility.
type LeafServer interface {
	// Schedules a function call on a worker.
	ScheduleCall(context.Context, *common.CallRequest) (*common.CallResponse, error)
	// Registers a function autoscaler on the leaf.
	// Must be called before calling ScheduleCall.
	// An entry for the function must exist in the database.
	RegisterFunction(context.Context, *RegisterFunctionRequest) (*common.CreateFunctionResponse, error)
	// State streams changes in state of a function_id.
	// A change in the number of running instances.
	State(*common.StateRequest, grpc.ServerStreamingServer[common.StateResponse]) error
	mustEmbedUnimplementedLeafServer()
}

// UnimplementedLeafServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLeafServer struct{}

func (UnimplementedLeafServer) ScheduleCall(context.Context, *common.CallRequest) (*common.CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleCall not implemented")
}
func (UnimplementedLeafServer) RegisterFunction(context.Context, *RegisterFunctionRequest) (*common.CreateFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFunction not implemented")
}
func (UnimplementedLeafServer) State(*common.StateRequest, grpc.ServerStreamingServer[common.StateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method State not implemented")
}
func (UnimplementedLeafServer) mustEmbedUnimplementedLeafServer() {}
func (UnimplementedLeafServer) testEmbeddedByValue()              {}

// UnsafeLeafServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeafServer will
// result in compilation errors.
type UnsafeLeafServer interface {
	mustEmbedUnimplementedLeafServer()
}

func RegisterLeafServer(s grpc.ServiceRegistrar, srv LeafServer) {
	// If the following call pancis, it indicates UnimplementedLeafServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Leaf_ServiceDesc, srv)
}

func _Leaf_ScheduleCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeafServer).ScheduleCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Leaf_ScheduleCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeafServer).ScheduleCall(ctx, req.(*common.CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leaf_RegisterFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeafServer).RegisterFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Leaf_RegisterFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeafServer).RegisterFunction(ctx, req.(*RegisterFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leaf_State_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.StateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LeafServer).State(m, &grpc.GenericServerStream[common.StateRequest, common.StateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Leaf_StateServer = grpc.ServerStreamingServer[common.StateResponse]

// Leaf_ServiceDesc is the grpc.ServiceDesc for Leaf service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Leaf_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leaf.Leaf",
	HandlerType: (*LeafServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleCall",
			Handler:    _Leaf_ScheduleCall_Handler,
		},
		{
			MethodName: "RegisterFunction",
			Handler:    _Leaf_RegisterFunction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "State",
			Handler:       _Leaf_State_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "leaf/leaf.proto",
}
