name: Tests

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

permissions:
  contents: read

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.0'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: go test -v ./...

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:28.4.0-dind
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.0'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download dependencies
        run: go mod download

      - name: Wait for Docker daemon
        run: |
          timeout 30s bash -c 'until docker info; do sleep 1; done'

      - name: Run integration tests
        run: go test -v ./... -tags=integration
        env:
          DOCKER_HOST: tcp://localhost:2376

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "All tests passed."
            exit 0
          else
            echo "Some tests failed:"
            echo "Unit tests: ${{ needs.unit-tests.result }}"
            echo "Integration tests: ${{ needs.integration-tests.result }}"
            exit 1
          fi
